AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Cloud Assignment - Backend with SAM

Parameters:
  ExistingCustomerTableName:
    Type: String
    Default: customer_ids
    Description: "Name of the existing DynamoDB table"

  ExistingUserCreatedTopicArn:
    Type: String
    Default: arn:aws:sns:us-east-1:728750563276:user-created-alerts
    Description: "ARN of the existing SNS topic for user-created alerts"

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME: !Ref ExistingCustomerTableName

Resources:
  ### API
  CustomerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  ### Lambda: Put Customer
  PutCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/put_customer_id/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingCustomerTableName
        - SNSPublishMessagePolicy:
            TopicName: !Select [5, !Split [":", !Ref ExistingUserCreatedTopicArn]]
      Environment:
        Variables:
          TABLE_NAME: !Ref ExistingCustomerTableName
          SNS_TOPIC_ARN: !Ref ExistingUserCreatedTopicArn
      Events:
        PutCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApi
            Path: /customer
            Method: post
            Auth:
              ApiKeyRequired: true

  ### Lambda: Get Customer
  GetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/get_customer_id/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingCustomerTableName
      Events:
        GetCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApi
            Path: /customer/{id}
            Method: get
            Auth:
              ApiKeyRequired: true

  ### Lambda: Delete Customer
  DeleteCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/delete_customer_id/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingCustomerTableName
      Events:
        DeleteCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApi
            Path: /customer/{id}
            Method: delete
            Auth:
              ApiKeyRequired: true

  ### Lambda: Stream Processor
  StreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/stream_processor/
      Handler: app.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref CustomerStateMachine
      Environment:
        Variables:
          CUSTOMER_STATE_MACHINE_ARN: !Ref CustomerStateMachine
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ExistingCustomerTableName}/stream/*
            StartingPosition: TRIM_HORIZON

  ### Lambda: Process Customer
  ProcessCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/process_customer/
      Handler: app.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingCustomerTableName
      Environment:
        Variables:
          PROCESSED_CUSTOMERS_TABLE: !Ref ExistingCustomerTableName

  ### Step Function
  CustomerStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: CustomerWorkflow
      Definition:
        Comment: "The workflow starts when a new customer is added."
        StartAt: ProcessCustomer
        States:
          ProcessCustomer:
            Type: Task
            Resource: !GetAtt ProcessCustomerFunction.Arn
            End: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessCustomerFunction

  ### API Gateway Deployment + Stage
  CustomerApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CustomerApi
    DependsOn:
      - PutCustomerFunction
      - GetCustomerFunction
      - DeleteCustomerFunction

  CustomerApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      RestApiId: !Ref CustomerApi
      DeploymentId: !Ref CustomerApiDeployment

  ### Usage Plan + ApiKey
  CustomerUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "CustomerPlan-${AWS::StackName}"
      ApiStages:
        - ApiId: !Ref CustomerApi
          Stage: !Ref CustomerApiStage
      Throttle:
        RateLimit: 10
        BurstLimit: 5
      Quota:
        Limit: 1000
        Period: MONTH

  CustomerApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "CustomerApiKey-${AWS::StackName}"
      Enabled: true

  CustomerUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref CustomerApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref CustomerUsagePlan

  ### EventBridge for Step Function
  EventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: "*"

  CustomerEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.dynamodb"
        detail-type:
          - "AWS API Call via CloudTrail"
      Targets:
        - Arn: !Ref CustomerStateMachine
          Id: "CustomerWorkflowTarget"
          RoleArn: !GetAtt EventBridgeInvokeRole.Arn

Outputs:
  CustomerApiBaseUrl:
    Description: "Base URL for Customer API"
    Value: !Sub "https://${CustomerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CustomerTableName:
    Description: "Existing DynamoDB table name"
    Value: !Ref ExistingCustomerTableName

  CustomerApiKeyValue:
    Description: "API Key for Customer API"
    Value: !Ref CustomerApiKey

  CustomerStateMachineArn:
    Description: "ARN of Customer Step Function"
    Value: !Ref CustomerStateMachine

  UserCreatedTopicArn:
    Description: "Existing SNS Topic ARN for new user alerts"
    Value: !Ref ExistingUserCreatedTopicArn
